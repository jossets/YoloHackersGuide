[Intro]
id=intro
category=HTTP
title=HTTP
desc="
Un serveur web tourne sur le serveur cible.<br/>
<br/>
Vous écrivez une URL dans votre navigateur pour spécifier la page que vous voulez obtenir.<br/>
Votre navigateur web encode l'URL et l'envoie au serveur en utilisant le protocole HTTP.<br/>
Le serveur renvoye une page affichable décrite en HTML grace au protocole HTTP.<br/>
<br/>
HTTP est un protocole riche qui permet de négocier des options et échanger des données.<br/>
Notamment des cookies sont utilisés pour garder des informations entre deux sessions.<br/>
Pour les lires et les modifiers, nous utilisons un proxy HTTP.<br/>
<br/>
https://fr.wikipedia.org/wiki/Hypertext_Transfer_Protocol
"
title_en=HTTP
desc_en="
A web server is running on the target server.<br/>
<br/>
You enter an URL in your browser to specify the page you want to get.<br/>
Your web browser encodes the URL and sends it to the server using the HTTP protocol.<br/>
The server returns a displayable page described in HTML using the HTTP protocol.<br/>
<br/>
HTTP is a rich protocol, able to negotiate options and exchange data.<br/>
In particular, cookies are used to store information between two sessions.<br/>
HTTP request sand responses can be intercepted, modified and resent thanks to an HTTP proxy.
<br/>
https://fr.wikipedia.org/wiki/Hypertext_Transfer_Protocol
"


[HTTP0.9]
id=HTTP0.9
category=HTTP
keywords=
chall=TrainingHTTPNc
title=HTTP 0.9
desc="
Le protocole HTTP est utilisé par les navigateurs web pour obtenir des documents hébergés par les serveurs.<br/>
Le navigateur se connecte en TCP à un serveur, sur le port 80 par défaut.<br/>
La requête minimale contient une commande (ici GET), une URL (/hello.txt), une ligne vide. 
<pre><code>GET /hello.txt
 
</code></pre>
La réponse contient directement le fichier.
<pre><code>Hello world
</code></pre>

<pre><code>$ printf 'GET /hello.txt \n\r\n' | nc localhost 8001
</code></pre>
"
title_en=HTTP 0.9
desc_en="
The HTTP protocol is used by web browsers to obtain documents hosted by servers.<br/>
The browser connects to a server via TCP, on port 80 by default.
The minimal request contains a command (here GET), a URL (/hello.txt), an empty line. 
<pre><code>GET /hello.txt
 
</code></pre>
The answer contains the requested file.
<pre><code>Hello world
</code></pre>

<pre><code>$ printf 'GET /hello.txt \n\r\n' | nc localhost 8001
</code></pre>
"


[HTTP1.1]
id=HTTP1.1
category=HTTP
keywords=
title=HTTP 1.1
desc="
La version 1.1 du protocole HTTP est optimisée pour transférer des pages HTML complexes, et permet de négocier la langue et les formats d'encodages.<br/>
La requête minimale contient une commande (GET), une url (/hello.txt), la version (HTTP/1.1), le champ Host, une ligne vide.<br/>
<pre><code>GET /hello.txt HTTP/1.1
Host: 10.10.10.11 80

</code></pre>

La réponse contient une entête composée de nombreux champs (server, date,...), la longueur du contenu (13), et le contenu sous forme de texte.<br/>
<pre><code>HTTP/1.0 200 OK
Server: SimpleHTTP/0.6 Python/2.7.15+
Date: Thu, 26 Dec 2019 17:06:12 GMT
Content-type: text/html; charset=UTF-8
Content-Length: 13
 
Hello world

</code></pre>

Les headers de la réponse sont des mines d'information sur le serveur, sa version...<br/>
Ici un serveur Apache en version 0.8.4 qui éxécute des scripts avec un interpréteur php en version 7.3.13.
<pre><code>HTTP/1.1 200 OK
Server: Apache/0.8.4
Content-Type: text/html; charset=UTF-8
Transfer-Encoding: chunked
Connection: keep-alive
X-Powered-By: PHP/7.3.13
</code></pre>

<pre><code>$ printf 'GET / HTTP/1.1\r\nHost: localhost 8001\r\n\r\n' | nc localhost 8001
</code></pre>
"

title_en=HTTP 1.1
desc_en="
HTTP protocol version 1.1 is optimized for complex HTML pages transferring, and allows negotiation of language and encoding formats.<br/>
The minimal request contains a command (GET), a url (/hello.txt), the version (HTTP/1.1), the Host field, an empty line.<br/><pre><code>GET /hello.txt HTTP/1.1
Host: 10.10.10.11 80

</code></pre>

The answer contains a header, composed of many fields (server, date,...), the length of the content (here 13), and the content as text.<br/>
<pre><code>HTTP/1.0 200 OK
Server: SimpleHTTP/0.6 Python/2.7.15+
Date: Thu, 26 Dec 2019 17:06:12 GMT
Content-type: text/html; charset=UTF-8
Content-Length: 13
 
Hello world

</code></pre>

The headers of the answer contains lots of usefull information about the server, its version...<br/>
Here is an Apache server in version 0.8.4 that runs scripts with a php interpreter in version 7.3.13.
<pre><code>HTTP/1.1 200 OK
Server: Apache/0.8.4
Content-Type: text/html; charset=UTF-8
Transfer-Encoding: chunked
Connection: keep-alive
X-Powered-By: PHP/7.3.13
</code></pre>

<pre><code>$ printf 'GET / HTTP/1.1\r\nHost: localhost 8001\r\n\r\n' | nc localhost 8001
</code></pre>
"


[HTTPCodes]
id=HTTPCodes
category=HTTP
keywords=
title="HTTP Codes"
desc="
Code de réponse HTTP
<pre><code>    1xx informational response – the request was received, continuing process
    2xx successful – the request was successfully received, understood, and accepted
		200 OK
    3xx redirection – further action needs to be taken in order to complete the request
		301 Moved Permanently => Redirection
		304 Not Modified
    4xx client error – the request contains bad syntax or cannot be fulfilled
		400 Bad request
		401 Unauthorized
		403 Forbidden
		404 Not found
    5xx server error – the server failed to fulfil an apparently valid request
		500 Internal Server Error
		502 Bad Gateway - The server was acting as a gateway or proxy and received an invalid response from the upstream server
		503 Service Unavailable - The server cannot handle the request (because it is overloaded or down for maintenance)
		504 Gateway Timeout - The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.
	https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
</code></pre>
"
title_en="HTTP Codes"
desc_en="
HTTP response codes
<pre><code>    1xx informational response – the request was received, continuing process
    2xx successful – the request was successfully received, understood, and accepted
		200 OK
    3xx redirection – further action needs to be taken in order to complete the request
		301 Moved Permanently => Redirection
		304 Not Modified
    4xx client error – the request contains bad syntax or cannot be fulfilled
		400 Bad request
		401 Unauthorized
		403 Forbidden
		404 Not found
    5xx server error – the server failed to fulfil an apparently valid request
		500 Internal Server Error
		502 Bad Gateway - The server was acting as a gateway or proxy and received an invalid response from the upstream server
		503 Service Unavailable - The server cannot handle the request (because it is overloaded or down for maintenance)
		504 Gateway Timeout - The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.
	https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
</code></pre>
"


[HTTPCurlWget]
id=HTTPCurlWget
category=HTTP
keywords=
chall=TrainingHTTP_curl
chall2=TrainingHTTP_wget
title="Curl et Wget"
desc="
Télécharger un fichier :
<pre><code>$ wget http://localhost:8001/
</code></pre>
Afficher le contenu de la réponse :
<pre><code>$ curl http://localhost:8001/
</code></pre>
Afficher les headers, la requête et le contenu de la réponse :
<pre><code>$ curl -v http://localhost:8001/
</code></pre>
"
title_en="Curl and Wget"
desc_en="
Download a file :
<pre><code>$ wget http://localhost:8001/
</code></pre>
Print the content of the file :
<pre><code>$ curl http://localhost:8001/
</code></pre>
Print the HTTP headers and the content of the file  :
<pre><code>$ curl -v http://localhost:8001/
</code></pre>
"

[HTTPHeader]
id=HTTPHeader
category=HTTP
keywords=
chall=TrainingHTTPHeader
chall2=TrainingHTTPHeaderCustom
title="HTTP: Entêtes"
desc="
Les headers HTTP sont standardisés et sont riches en information.<br/>
- Host: Précise le site web destinataire de la requète.<br/>
- Referer: Adresse de la page web qui a généré la requète.<br/>
- User-Agent: Navigateur utilisé pour se connecter.

Il est possible d'ajouter des headers personnels, tel 'X-MyHeader: value'
<pre><code>GET / HTTP/1.1
Host: localhost:8001
User-Agent: curl/7.58.0
Accept: */*
X-MyHeader: value

</code></pre>


Pour ajouter un header avec curl : -H 'header: valeur'
<pre><code>$ curl -H 'X-MyHeader: value' http://localhost:8001
</code></pre>
"
title_en="HTTP Headers"
desc_en="
HTTP headers are standardized and contain usefull informations.<br/>
- Host: the target of the request.
- Referer: Address of the web page that generated the query.<br/>
- User-Agent: Browser used to log in. <br/>

Custom headers can be freely added. Here 'X-MyHeader: value':
<pre><code>GET / HTTP/1.1
Host: localhost:8001
User-Agent: curl/7.58.0
Accept: */*
X-MyHeader: value

</code></pre>


Add a custom Header with curl : -H 'header: value'
<pre><code>$ curl -H 'X-MyHeader: yoloforpresident' http://localhost:8001
</code></pre>
"

[HTTPAgent]
id=HTTPAgent
category=HTTP
keywords=
chall=TrainingHTTPAgent
title="HTTP: User-Agent "
desc="
Le header des requêtes contient un champ User-Agent.   
Il est utilisé par les navigateurs pour s'identifier et donner des information sur leur version.    
Le serveur peut adapter la page à un vieux navigateur Internet Explorer ou un Firefox dernier cris.   

Curl v7.68.0 utilise 'curl/7.68.0' comme User-Agent. Il est possible de définir la valeur du User-Agent avec l'option -A.
<pre><code>curl -A 'MyAgent' http://localhost:8001
</code></pre>

"
title_en="HTTP User-Agent"
desc_en="
The header of HTTP requests contains a User-Agent field.   
It is used by browsers to identify themselves and give information about their version.    
The server can adapt the page to an older Internet Explorer or a newer Firefox browser.   

Curl v7.68.0 uses 'curl/7.68.0' as the User-Agent. It is possible to set the User-Agent value with the -A option.
<pre><code>curl -A 'MyAgent' http://localhost:8001
</code></pre>
"


[HTTPParam]
id=HTTPParam
category=HTTP
keywords=
chall=TrainingHTTPParam
title="HTTP Get: les paramètres"
desc="
L'URI permet de précider une ressource, et d'ajouter des paramètres.<br/>
Le premier paramètre est identifié par un ?, les suivants par un &.<br/>
Si les paramètres contiennent des ? ou des &, ils sont encodés sous la forme %3F et %26. On parle de Percent (%) encoding.<br/>
https://fr.wikipedia.org/wiki/Percent-encoding<br/>

Exemple:
<pre><code>$ curl 'http://localhost:8001/register.php?name=jean&lastname=bon&age=42&admin=true'
</code></pre>
Le shell unix utilisant le & pour lancer des taches en arrière plan, il est impératif de mettre l'URL entre '.
"
title_en="HTTP Get: parameters"
desc_en="
An URI (Universal Resource Locator) specify an internet resource, followed by optional parameters.<br/>
The first parameter is identified by a ?, the following ones by a &.<br/>.
If the parameters contain a ? or a &, they are encoded as %3F and %26. This is called Percent (%) encoding.<br/>.https://fr.wikipedia.org/wiki/Percent-encoding<br/>

Exemple:
<pre><code>$ curl 'http://localhost:8001/register.php?name=jean&lastname=bon&age=42&admin=true'
</code></pre>
As unix shell uses the & to launch background tasks, it is imperative to put the URL between quotes '.
"

;
;  Authent
;
[HTTPFormAuthSimple]
id=HTTPFormAuthSimple
category=HTTP
keywords=
chall=TrainingHTTPAuthSimple
chall2=TrainingHTTPAuthSimple2
title="HTTP Authentification Basic"
desc="
HTTP dispose d'une fonctionnalité d'authentification basique. Il est possible ajouter un champ contenant un identifiant et un mot de passe en clair.<br/>
Ces informations sont mise sous la forme login:password, puis encodées en base64, et ajoutées dans l'entête de la requête:<br/>
Authorization: Basic bG9naW46cGFzc3dvcmQ=<br/>
<br/>
Exemple:
<pre><code>GET /hello.txt HTTP/1.1
Host: localhost:8001
Authorization: Basic bG9naW46cGFzc3dvcmQ=
User-Agent: curl/7.58.0
Accept: */*

</code></pre>

Pour envoyer une requête avec des informations d'authentification avec curl: 
<pre><code>$ curl -u login:password http://localhost:8001/hello.txt
</code></pre>

Pour encoder un login:password dans le terminal
<pre><code>$ printf 'login:password' | base64
bG9naW46cGFzc3dvcmQ=
</code></pre>
Pour décoder du base64 dans le terminal
<pre><code>$ printf 'bG9naW46cGFzc3dvcmQ=' | base64 -d
login:password
</code></pre>

Pour tester une liste de mots de passe:
<pre><code>for i in `cat rockyou.txt`; do printf "\n"$i": "; curl  -u admin:$i http://12.10.1.11/training-http-auth-simple.php; done
</code></pre>
"

title_en="HTTP Authentification Basic"
desc_en="
HTTP has basic authentication feature, based on a field containing a username and a password in clear text.<br/>
login:password is base64 encoded then added in the request header.<br/>
Authorization: Basic bG9naW46cGFzc3dvcmQ=<br/>
<br/>
Exemple:
<pre><code>GET /hello.txt HTTP/1.1
Host: localhost:8001
Authorization: Basic bG9naW46cGFzc3dvcmQ=
User-Agent: curl/7.58.0
Accept: */*

</code></pre>

Basic auth with curl: 
<pre><code>$ curl -u login:password http://localhost:8001/hello.txt
</code></pre>

Base64 encode login:password in shell
<pre><code>$ printf 'login:password' | base64
bG9naW46cGFzc3dvcmQ=
</code></pre>
Base64 decode
<pre><code>$ printf 'bG9naW46cGFzc3dvcmQ=' | base64 -d
login:password
</code></pre>

Bruteforce Basic auth with curl and rockyou password list:
<pre><code>for i in `cat rockyou.txt`; do printf "\n"$i": "; curl  -u admin:$i http://12.10.1.11/training-http-auth-simple.php; done
</code></pre>
"



;
; Form
;
[HTTPFormPost]
id=HTTPFormPost
category=HTTP
keywords=
chall=TrainingHTTPPostCurl
chall2=TrainingHTTPPostProxy
title="FORM: méthode Post"
desc="
Quand une page web comporte un formulaire, elle peut envoyer le contenu des champs avec la méthode GET dans les paramètres de l'URL, ou avec la méthode POST dans le corps de la requète.<br/>
<br/>
Les valeurs en paramètres du GET apparaissent dans les logs, et sont limités en longueur.<br/>
Les valeurs en paramètres du POST n'apparaissent pas dans les logs, et ne sont pas limités en longueur. Il est ainsi possible d'uploader de gros fichiers.<br/>
Ces paramètres sont encodés avec le format 'Percent encoding'.<br/>
Exemple:
<pre><code>POST /login.php HTTP/1.1
Host: 10.10.1.11
Content-Type: application/x-www-form-urlencoded
Content-Length: 24

login=James&password=007
</code></pre>

Poster un formulaire avec curl:
<pre><code>$ curl -X POST -F 'username=admin' -F 'password=megapassword'  http://localhost:8001/
</code></pre>
"
title_en="FORM: POST method"
desc_en="
Web pages send Form fields either using GET method in the URL parameters, or POST method in the request body.<br/>
<br/>
Parameter of GET requests are saved in logs files, and have limited length.<br/>
Parameter of POST requests do not appear in the logs, and are not limited in length. It is thus possible to upload large files.<br/>
These parameters are encoded with 'Percent encoding'.<br/>
Example:
<pre><code>POST /login.php HTTP/1.1
Host: 10.10.1.11
Content-Type: application/x-wwww-form-urlencoded
Content-Length: 24

login=James&password=007
</code></pre>
Post a form with curl:
<pre><code>$ curl -X POST -F 'username=admin' -F 'password=megapassword'  http://localhost:8001/
</code></pre>
"

;
; Form Html
;
[HTTPFormPostHTML]
id=HTTPFormPostHTML
category=HTTP
keywords=
chall=TrainingHTTPPostSrc
title="FORM: Trouver les champs du formulaire dans le code HTML"
desc="
Les formulaires sont des objets HTML de base, définis par les balises &lt;form> et &lt;/form><br/>
&lt;input name='xxx'>: Nom des champs de type texte. <br/> 
&lt;form action='xxx': URL a laquelle sera envoyé le formulaire. Si le champ est vide, le formulaire est envoyé à la URL.<br/>
Exemple:
<pre><code>&lt;form action=&quot;/action_page.php&quot;&gt; 
  First name: &lt;input type=&quot;text&quot; name=&quot;firstname&quot; value=&quot;Mickey&quot;&gt
  Last name:  &lt;input type=&quot;text&quot; name=&quot;lastname&quot; value=&quot;Mouse&quot;&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; 
&lt;/form&gt; 
</code></pre>

Poster un formulaire avec curl:
<pre><code>$ curl -X POST -F 'firstname=Mickey' -F 'lastname=Mouse'  http://12.10.1.11/action_page.php
</code></pre>
"
title_en="FORM: Identify Form fields in HTML pages"
desc_en="
Forms are HTML base objects, enclosed by &lt;form> and &lt;/form> tags.<br/>
&lt;input name='xxx'>: Text input fields<br/> 
&lt;form action='xxx': URL to send the Form to. If empty send to the current URL.<br/>
Exemple:
<pre><code>&lt;form action=&quot;/action_page.php&quot;&gt; 
  First name: &lt;input type=&quot;text&quot; name=&quot;firstname&quot; value=&quot;Mickey&quot;&gt
  Last name:  &lt;input type=&quot;text&quot; name=&quot;lastname&quot; value=&quot;Mouse&quot;&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; 
&lt;/form&gt; 
</code></pre>

Post a Form thanks curl:
<pre><code>$ curl -X POST -F 'firstname=Mickey' -F 'lastname=Mouse'  http://12.10.1.11/action_page.php
</code></pre>
"



[HTTPFormGet]
id=HTTPFormGet
category=HTTP
keywords=
chall=TrainingHTTPGet
title="FORM: méthode Get"
desc="
Les pages web comportant des formulaires utilisent généralement la commande POST, mais elles peuvent aussi utiliser une commande GET.<br/>
Dans ce cas, la valeur des paramètres sont directement passés comme argument dans la requète.<br/>
Ne pas oublier de mettre l'url entre 'cotes'<br/>
Exemple:
<pre><code>$ curl 'http://localhost:8001/register.php?name=jean&lastname=bon&age=42&admin=true'
</code></pre>
"
title_en="FORM: Get method"
desc_en="
HTML Forms most often use the POST method, sometime also the GET method is used.<br/>
Paramètres are sent as request URI arguments.<br/>
When using curl in shell, dont forget to use quotes '<br/>
Exemple:
<pre><code>$ curl 'http://localhost:8001/register.php?name=jean&lastname=bon&age=42&admin=true'
</code></pre>
"



[HTTPFormPostJSon]
id=HTTPFormPostJSon
category=HTTP
keywords=
chall=TrainingHTTPFormPostJSon
title="FORM: données au format JSON"
desc="
Dans les formulaires élaborés, les données sont validées en Java Script avant d'être envoyées, au bon format au serveur.<br/>
JavaScript utilise nativement le format JSON pour envoyer des structures de données structurées.<br/>
Exemple: {"key1":"value1", "key2":"value2"}.<br/>
Dans ce cas, l'entête Content-Type précise le type de données: Content-Type: application/json<br/>

Exemple:
<pre><code>POST / HTTP/1.1
Host: localhost:8001
User-Agent: curl/7.58.0
Accept: */*
Content-Type: application/json
Content-Length: 34

{&quot;key1&quot;:&quot;value1&quot;, &quot;key2&quot;:&quot;value2&quot;}
</code></pre>

Curl :
<pre><code>$ curl --header &quot;Content-Type: application/json&quot; -X POST --data  '{&quot;key1&quot;:&quot;value1&quot;, &quot;key2&quot;:&quot;value2&quot;}' http://10.10.1.11/
</code></pre>
"

title_en="FORM: JSON format"
desc_en="
It's common to procces form fields values in JavaScript before sending them to the server.<br/>
JavaScript natively makes use of JSon format to exchange structured datas.<br/>
Exemple: {"key1":"value1", "key2":"value2"}.<br/>
The Content-Type header is then set to json: Content-Type: application/json<br/>

Exemple:
<pre><code>POST / HTTP/1.1
Host: localhost:8001
User-Agent: curl/7.58.0
Accept: */*
Content-Type: application/json
Content-Length: 34

{&quot;key1&quot;:&quot;value1&quot;, &quot;key2&quot;:&quot;value2&quot;}
</code></pre>

Curl:
<pre><code>$ curl --header &quot;Content-Type: application/json&quot; -X POST --data  '{&quot;key1&quot;:&quot;value1&quot;, &quot;key2&quot;:&quot;value2&quot;}' http://10.10.1.11/
</code></pre>
"




[HTTPFormPostFile]
id=HTTPFormPostFile
category=HTTP
keywords=
chall=TrainingHTTPFormPostFile
title="FILE: Upload"
desc="
Les formulaires sont généralement utilisés pour s'enregister, se connecter ou d'uploader des fichiers.<br/>
Des contrôles sur les fichiers uploadés peuvent être fait en javascript sur le client, ou sur le serveur.<br/>
On vérifie souvent la taille, le nom, l'extension du fichier, et parfois son header.<br/>
Un chapitre entier du guide est dédié à l'upload de nos shells.<br/>
<br/>
Un champ de type Fichier est caractérisé par le code HTML 
<pre><code>&lt;input type="file" name="fileToUpload">:
</code></pre>
Commande curl
<pre><code>curl -X POST -F 'fileToUpload=@./picture.jpg' http://10.10.1.11/upload
</code></pre>
"
title_en="FILE: Upload"
desc_en="
Forms are often used to register, login, and upload files.<br/>
Lots of sanity checks can be done in JavaScript in the browser before the upload or on the server after the upload.<br/>
Filename and file extension, are often checked, sometime even the file header is chekced to verify wether it's an image or a php file.<br/>
A full chapter is dedicated to file upload and filter bypass.<br/>
<br/>
A File field can be identified by the following HTML code 
<pre><code>&lt;input type="file" name="fileToUpload">:
</code></pre>
Curl command
<pre><code>curl -X POST -F 'fileToUpload=@./picture.jpg' http://10.10.1.11/upload
</code></pre>
"


;
; Cookies
;  
[HTTPFormCookies]
id=HTTPFormCookies
category=HTTP
keywords=
title="Curl: Sauver et modifier des cookies"
desc="
Les cookies servent à stocker des valeurs sur le navigateur qui seront reutilisées entre deux sessions.<br/>
Ils peuvent contenir des choix de langue, couleurs, et parfois d'authentification...<br/>
<br/>
Lire les cookies envoyés par le serveur et les stocker dans un cookie jar.
<pre><code>$ curl  -c cookies.txt http://10.10.1.11/cookies.php
</code></pre>

Envoyer un cookie sauvegardé, et sauver la nouvelle valeur
<pre><code>$ curl -b cookies.txt -c cookies.txt http://10.10.1.11/cookies.php
</code></pre>

Envoyer un cookie manuellement
<pre><code>$ curl -b 'code=1447' http://10.10.1.11/cookies.php
</code></pre>
"
title_en="Curl: Store and modify cookies"
desc_en="
Cookies are used to store data on the browser, that will be reused at the next session.<br/>
They can contain everything: choices of language, colors, and sometimes password...<br/>
<br/>
Read cookies in the server response and store them in a cookie jar.
<pre><code>$ curl  -c cookies.txt http://10.10.1.11/cookies.php
</code></pre>

Send a stored cookie, and update its value with the response
<pre><code>$ curl -b cookies.txt -c cookies.txt http://10.10.1.11/cookies.php
</code></pre>

Send a manually crafted cookie
<pre><code>$ curl -b 'code=1447' http://10.10.1.11/cookies.php
</code></pre>
"

